class Solution:
    """
    @param A: an array
    @return: total of reverse pairs
    """
    def reversePairs(self, A):
        # write your code here
        if not A:
            return 0
        self.cnt = 0
        self.mergeSort(A)
        return self.cnt 

    def mergeSort(self, A):
        tmp = [0 for _ in range(len(A))]
        self.mergeSortHelper(tmp, A, 0, len(A) - 1)

    def mergeSortHelper(self, tmp, A, start, end):
        if start >= end:
            return 
        mid = start + (end - start) // 2
        self.mergeSortHelper(tmp, A, start, mid)
        self.mergeSortHelper(tmp, A, mid + 1, end)
        self.merge(tmp, A, start, mid, end)

    def merge(self, tmp, A, start, mid, end):
        left_pointer, right_pointer = start, mid + 1
        tmp_idx = start
        while left_pointer <= mid and right_pointer <= end:
            if A[left_pointer] <= A[right_pointer]:
                tmp[tmp_idx] = A[left_pointer]
                tmp_idx += 1
                left_pointer += 1
            else:
                tmp_cnt = mid - left_pointer + 1 
                self.cnt += tmp_cnt
                tmp[tmp_idx] = A[right_pointer]
                tmp_idx += 1
                right_pointer += 1

        while left_pointer <= mid:
            tmp[tmp_idx] = A[left_pointer]
            tmp_idx += 1
            left_pointer += 1 

        while right_pointer <= end:
            tmp[tmp_idx] = A[right_pointer]
            tmp_idx += 1
            right_pointer += 1

        for i in range(start, end + 1):
            A[i] = tmp[i]                                       





