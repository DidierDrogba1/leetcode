class Solution:
    """
    @param arr: The array 
    @param k: the sum 
    @return: The length of the array
    """
    def searchSubarray(self, arr, k):
        # Write your code here
        if not arr:
            return -1

        d = dict()
        d[0] = -1
        prefix_sum = 0
        length = len(arr)
        for i in range(length):
            cur = arr[i]
            prefix_sum += cur 
            target = prefix_sum - k
            if target in d.keys():
                return i - d[target] #结束位置最小的前缀和：只要遇到target，直接返回
                #return也对起始位置最小做了判断，遇到了就返回，就一定是起始位置最小
            #下面的if，存储前缀和的结束位置，如果出现相同的前缀和，那就不更新了
            #因为结束位置小的已经记录了。
            if prefix_sum not in d: 
                d[prefix_sum] = i 
        
        return -1
#d[0] = 0的情况比较麻烦，还是用d[0] = -1比较好，不改变原数组
        # d = dict()
        # d[0] = 0
        # prefix_sum = 0
        # length = len(arr)
        # for i in range(1, length+ 1):
        #     cur = arr[i - 1]
        #     prefix_sum += cur 
        #     target = prefix_sum - k
        #     if target in d.keys():
        #         return i - d[target] 
        #     if prefix_sum not in d:
        #         d[prefix_sum] = i 
        
        # return -1