class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        if not nums or len(nums) <= 2:
            return []
        nums.sort()
        #nums = sorted(nums) 
        self.final_ans = []
        idx = 0
        for idx in range(len(nums) - 2):
            ###不能用nums[idx] == nums[idx + 1]，因为[0,0,0]这种情况就没有正确解了
            ###记得idx > 0很重要，不然nums[idx - 1]就变成nums[-1]了
            if idx > 0 and nums[idx] == nums[idx - 1]: 
                continue
            self.twoSum(idx, nums)
        return self.final_ans    

        # while idx <= len(nums) - 3:
        #     #nums[idx] == nums[idx + 1] 似乎很麻烦，记得idx > 0很重要
        #     if nums[idx] == nums[idx + 1]: 
        #         idx += 1
        #     self.twoSum(idx, nums)

    def twoSum(self, idx, nums):     
            target = -nums[idx]
            left_pointer, right_pointer = idx + 1, len(nums) - 1
            
            while left_pointer < right_pointer:
                if nums[left_pointer] + nums[right_pointer] == target:
                    self.final_ans.append([-target, nums[left_pointer], \
                    nums[right_pointer]])
                    left_pointer += 1
                    right_pointer -= 1

                    while left_pointer < right_pointer and \
                    nums[left_pointer] == nums[left_pointer - 1]:
                        left_pointer += 1

                    while left_pointer < right_pointer and \
                    nums[right_pointer] == nums[right_pointer + 1]:
                        right_pointer -= 1 

                elif nums[left_pointer] + nums[right_pointer] < target:
                    left_pointer += 1
                else:
                    right_pointer -=1