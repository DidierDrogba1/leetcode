https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/zi-xu-lie-wen-ti-tong-yong-si-lu-zui-chang-hui-wen/ 
class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        # 使用sub_len, i 计算出j的写法
        # if not s:
        #     return s 
        
        # dp_vec = [[0] * len(s) for _ in range(len(s))]
        # for i in range(len(s)):
        #     dp_vec[i][i] = 1 
        # for i in range(1, len(s)):
        #     dp_vec[i][i - 1] = 0

        # for sub_len in range(2, len(s) + 1):
        #     for i in range(len(s) - sub_len + 1):
        #         j = i + sub_len - 1
        #         if s[i] == s[j]:
        #             dp_vec[i][j] = dp_vec[i + 1][j - 1] + 2
        #         else:
        #             dp_vec[i][j] = max(dp_vec[i + 1][j], dp_vec[i][j - 1])

#        return dp_vec[0][len(s) - 1] 
        # 使用i, j的写法
        if not s:
            return s 
        
        dp_vec = [[0] * len(s) for _ in range(len(s))]
        for i in range(len(s)):
            dp_vec[i][i] = 1 
        for i in range(1, len(s)):
            dp_vec[i][i - 1] = 0

        for i in range(len(s) - 1, -1, -1):  #逻辑通过画图得到
            for j in range(i + 1, len(s)):   # 因为[i][i] = 1，j = i + 1 是未知的，所以从i + 1 开始
                if s[i] == s[j]:
                    dp_vec[i][j] = dp_vec[i + 1][j - 1] + 2
                else:
                    dp_vec[i][j] = max(dp_vec[i + 1][j], dp_vec[i][j - 1])

        return dp_vec[0][len(s) - 1] 

