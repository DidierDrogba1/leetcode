class Solution:
    def triangleNumber(self, nums: List[int]) -> int:
        if not nums or len(nums) < 3:
            return 0 
        nums.sort()
        self.ans = 0 
        for i in range(2, len(nums)):
            start, end = 0, i - 1
            self.findNumber(start, end, i, nums)
        return self.ans 

                
    def findNumber(self, start, end, i, nums):
        left_pointer, right_pointer = start, end
        while left_pointer < right_pointer:
            if nums[left_pointer] + nums[right_pointer] > nums[i]:
                self.ans += right_pointer - left_pointer 
                right_pointer -= 1 
                ##这里是计算所有左指针的可行解，然后移动右指针 
            else:
                left_pointer += 1
                ## 两数之和过小，左指针右移


# class Solution:
#     def triangleNumber(self, nums: List[int]) -> int:
#         if not nums or len(nums) < 3:
#             return 0 
#         self.ans = 0  
#         nums.sort()      
#         for i in range(len(nums) - 2):
#             self.findNumber(i, i + 1, len(nums) - 1, nums)
#         return self.ans 

#     def findNumber(self, i, left_pointer, right_pointer, nums):
#         ### 固定一个小边，似乎比较麻烦
#         ### 双指针2234 会出错
          ### 如果枚举最小值，我想到的是用前缀和+二分代替你这里的双指针
#         #left_pointer, right_pointer = i + 1, len(nums) - 1
#         while left_pointer < right_pointer:
#             if nums[i] + nums[left_pointer] > nums[right_pointer]:
#                 left_pointer += 1
#                 self.ans += 1
#             else:
#                 left_pointer += 1